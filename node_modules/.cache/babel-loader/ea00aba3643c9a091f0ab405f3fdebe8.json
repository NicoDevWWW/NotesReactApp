{"ast":null,"code":"/**\n * @author Nicolas SQUEREN <nicosqueren@gmail.fr>\n * @copyright Copyright (c) 2020 Moulinroty (https://www.moulinroty.com)\n * @link https://www.moulinroty.com\n */\nconst URL = 'https://api.myidea.fr/v1/';\nvar globalparams = {\n  cache: 'default',\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8'\n  }\n};\nexport function getNotes() {\n  return new Promise((resolve, reject) => {\n    window.fetch(URL + 'notes').then(response => response.json()).then(result => {\n      console.log('Réponse API getNotes', result);\n      resolve(result);\n    }).catch(error => {\n      console.error(error);\n      reject(error);\n    });\n  });\n}\nexport function createNote(note) {\n  return new Promise((resolve, reject) => {\n    if (note.title && note.description) {\n      var body = {\n        title: note.title,\n        description: note.description\n      };\n      var params = {\n        method: 'POST',\n        mode: 'cors',\n        cache: 'default',\n        headers: {\n          'Content-Type': 'application/json; charset=UTF-8'\n        },\n        body: JSON.stringify(body)\n      };\n      fetch('https://api.myidea.fr/v1/notes', params).then(response => {\n        console.log(response);\n        resolve();\n      }).catch(error => reject(error));\n    } else {\n      reject('Informations manquantes');\n    }\n  });\n}\nexport function DeleteNote(id) {\n  const params = {\n    method: 'DELETE'\n  };\n  return new Promise((resolve, reject) => {\n    fetch(URL + \"notes/\" + id, params).then(response => {\n      console.log(response);\n      resolve();\n      setTimeout(window.location.reload());\n    }).catch(error => reject(error));\n  });\n}\nexport function updateNote(id) {\n  const requestOptions = {\n    method: 'PATCH'\n  };\n  return new Promise((resolve, reject) => {\n    fetch(URL + \"notes/\" + id, requestOptions).then(response => {\n      console.log(response);\n      resolve();\n    }).catch(error => reject(error));\n  });\n}","map":{"version":3,"sources":["/home/nicolas/Documents/_Digitalschool/ReactApp/NotesReactApp/src/service/Api.js"],"names":["URL","globalparams","cache","headers","getNotes","Promise","resolve","reject","window","fetch","then","response","json","result","console","log","catch","error","createNote","note","title","description","body","params","method","mode","JSON","stringify","DeleteNote","id","setTimeout","location","reload","updateNote","requestOptions"],"mappings":"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","sourcesContent":["/**\n * @author Nicolas SQUEREN <nicosqueren@gmail.fr>\n * @copyright Copyright (c) 2020 Moulinroty (https://www.moulinroty.com)\n * @link https://www.moulinroty.com\n */\nconst URL = 'https://api.myidea.fr/v1/'\nvar globalparams = {\n\tcache: 'default',\n\theaders: {\n\t\t'Content-Type': 'application/json; charset=UTF-8'\n\t}\n}\nexport function getNotes () {\n\treturn new Promise((resolve, reject) => {\n\t\twindow.fetch(URL + 'notes')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((result) => {\n\t\t\t\tconsole.log('Réponse API getNotes', result)\n\t\t\t\tresolve(result)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error)\n\t\t\t\treject(error)\n\t\t\t})\n\t})\n}\n\nexport function createNote(note){\n\treturn new Promise((resolve, reject) => {\n\t\tif (note.title && note.description){\n\t\t\tvar body = {\n\t\t\t\ttitle : note.title,\n\t\t\t\tdescription: note.description\n\t\t\t}\n\t\t\tvar params = { method: 'POST',\n\t\t\t\tmode: 'cors',\n\t\t\t\tcache: 'default' ,\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'application/json; charset=UTF-8'\n\t\t\t\t},\n\t\t\t\tbody: JSON.stringify(body)\n\t\t\t};\n\t\t\tfetch('https://api.myidea.fr/v1/notes', params)\n\t\t\t\t.then(response => {\n\t\t\t\t\tconsole.log(response)\n\t\t\t\t\tresolve()\n\t\t\t\t})\n\t\t\t\t.catch(error => reject(error))\n\t\t}else{\n\t\t\treject('Informations manquantes')\n\t\t}\n\t})\n}\n\nexport function DeleteNote (id){\n\tconst params = {\n\t\tmethod: 'DELETE',\n\n\t};\n\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(URL + \"notes/\" + id, params)\n\t\t\t\t.then(response => {\n\t\t\t\t\tconsole.log(response)\n\t\t\t\t\tresolve()\n\t\t\t\t\tsetTimeout(window.location.reload())\n\t\t\t\t})\n\t\t\t\t.catch(error => reject(error))\n\t})\n}\n\nexport function updateNote (id){\n\tconst requestOptions = {\n\t\tmethod: 'PATCH'\n\t};\n\treturn new Promise((resolve, reject) => {\n\t\tfetch(URL + \"notes/\" + id, requestOptions)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response)\n\t\t\t\tresolve()\n\t\t\t})\n\t\t\t.catch(error => reject(error))\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}